# flamsteed.js

# TODO

** instantiate but blackhole everything if not capable - Done
** shorten RUM keys, values (relative to t0) - Done
** force flush on unload - Done

** reuse timeout binding (efficiency)
** LP convention wrapper: event structure, naming, variants, deployment etc.

# LP client side enrichment
** lp cookie, lp session cookie
*** username
*** session id
** variant
** resolution/viewport/docsize
** bandwidth
** latency
** timezone
** referrer
** event
** LP flamsteed version
** Browser uid??

# LP deployment
** environment!

# server side ETL enrichments
** GeoIP
** user agent
** timestamp
** uuid
** blackhole bots



# Questions

- Do custom events pass in a timestamp? Or is it generated by flamsteed? The former requires checking for capability outside of core 
- Do we want to pass through the entire performance.timing object? Shortening rum keys will lose this, is it something we need?
- Using performance.now() loses us IE9. Is this a good sacrifice? It will mean we don't need to manage an initial timestamp. IE 10 has more or less caught up with 8 & 9 globally (need to double check out stats) - http://gs.statcounter.com/#browser_version_partially_combined-ww-daily-20130108-20130507


